@startuml

class Time {
-seconds: int

+Time(hours: int, minutes: int, seconds: int)
+getTotalTimeAsSeconds(): int
+operator+=(rhs: Time& {readonly}): Time& {readonly}
+{static}operator<<(os: ostream&, rhs: Time& {readonly}): ostream&
}

class SineSignal {
+SineSignal(voltageOffset: double, timeOffset: Time, minVoltage: double, maxVoltage: double, period: Time)
+getVoltage(t: Time): double
}

class SawtoothSignal {
+SawtoothSignal(voltageOffset: double, timeOffset: Time, minVoltage: double, maxVoltage: double, period: Time)
+getVoltage(t: Time): double
}

abstract class PeriodicSignal {
-minValue: double
-maxValue: double
-period: Time

+PeriodicSignal(voltageOffset: double, timeOffset: Time, minVoltage: double, maxVoltage: double, period: Time)
+{abstract} getVoltageAtTime(t: Time): double
#getMinVoltage(): double
#getMaxVoltage(): double
#getPeriod(): Time
}

class ConstantSignal {
+ConstantSignal(voltageOffset: double, timeOffset: Time)
+getVoltage(t: Time): double
}

abstract class Signal {
-voltageOffset: double
-timeOffset: Time

+Signal(valueOffset: double, timeOffset: Time)
+{abstract} getVoltageAtTime(t: Time): double
#getVoltageOffset(): double
#getTimeOffset(): Time
}

PeriodicSignal <|-- SineSignal
PeriodicSignal <|-- SawtoothSignal

Signal <|-- ConstantSignal
Signal <|-- PeriodicSignal

class AngularSensor {
+AngularSensor(name: string, source: Signal&)
#getUnits(): String
}

class PressureSensor {
+PressureSensor(name: string, source: Signal&)
#getUnits(): String
}

class TemperatureSensor {
+TemperatureSensor(name: string, source: Signal&)
#getUnits(): String
}

class VibrationSensor {
+VibrationSensor(name: string, source: Signal&)
#getUnits(): String
}

abstract class Sensor {
-name: string
-source: Signal&

+Sensor(name: string, source: Signal&)
+void takeReading(t: Time, recorder: DataRecorder&)
#{abstract} getUnits(): string
#getName(): string
#getSource(): Signal&
}

Sensor <|-- AngularSensor
Sensor <|-- PressureSensor
Sensor <|-- TemperatureSensor
Sensor <|-- VibrationSensor

Sensor "1" o-- "1" Signal

class DataRecorder {
out: ostream&

+DataRecorder(ostream&)
+log(timestamp: Time, sensorName: string, sensorVoltage: double, sensorUnits: string)
}

class MonitoringSystem {
-recorder: DataRecorder
-sensors: Sensor& {ordered}

+MonitoringSystem(out: ostream&)
+addSensor(s: Sensor*)
+takeReading(t: Time)
}

DataRecorder <-- Sensor
MonitoringSystem "1" *-- "1" DataRecorder
MonitoringSystem "1" o-- "*" Sensor

@enduml
